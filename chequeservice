package com.ykb.factoring.factoring.cheque.service.impl;

import com.ykb.factoring.factoring.cheque.client.CommonServicesClient;
import com.ykb.factoring.factoring.cheque.client.MiletosClient;
import com.ykb.factoring.factoring.cheque.constant.ExcelField;
import com.ykb.factoring.factoring.cheque.criteria.ParameterCriteria;
import com.ykb.factoring.factoring.cheque.dto.ChequeInfoByFilterDTO;
import com.ykb.factoring.factoring.cheque.dto.ChequeInfoDTO;
import com.ykb.factoring.factoring.cheque.dto.ChequeRoleDTO;
import com.ykb.factoring.factoring.cheque.dto.ChequesSaveResultDTO;
import com.ykb.factoring.factoring.cheque.dto.ExcelErrorDTO;
import com.ykb.factoring.factoring.cheque.dto.OfficialRateDTO;
import com.ykb.factoring.factoring.cheque.dto.ParameterDTO;
import com.ykb.factoring.factoring.cheque.dto.SheetErrorDTO;
import com.ykb.factoring.factoring.cheque.dto.customer.Customer;
import com.ykb.factoring.factoring.cheque.enumaration.ChequeChannel;
import com.ykb.factoring.factoring.cheque.enumaration.ChequeRoleType;
import com.ykb.factoring.factoring.cheque.mapper.ChequeMapper;
import com.ykb.factoring.factoring.cheque.model.ChequeInfo;
import com.ykb.factoring.factoring.cheque.model.ChequeRegistry;
import com.ykb.factoring.factoring.cheque.model.ChequeRole;
import com.ykb.factoring.factoring.cheque.model.ChequeTempRegistry;
import com.ykb.factoring.factoring.cheque.repository.ChequeInfoRepository;
import com.ykb.factoring.factoring.cheque.repository.specification.generator.ChequeSpecificationGenerator;
import com.ykb.factoring.factoring.cheque.request.RequestChequeBatchChange;
import com.ykb.factoring.factoring.cheque.request.RequestCustomerSearch;
import com.ykb.factoring.factoring.cheque.request.RequestExtractExcel;
import com.ykb.factoring.factoring.cheque.request.RequestSaveCheques;
import com.ykb.factoring.factoring.cheque.request.RequestSearchCheque;
import com.ykb.factoring.factoring.cheque.request.RequestSearchChequeByFilter;
import com.ykb.factoring.factoring.cheque.request.RequestSegmentation;
import com.ykb.factoring.factoring.cheque.response.Miletos.ResponseChequeReading;
import com.ykb.factoring.factoring.cheque.response.ResponseChequeBatchChange;
import com.ykb.factoring.factoring.cheque.response.ResponseExcelExtract;
import com.ykb.factoring.factoring.cheque.response.ResponseReadChequesFromImages;
import com.ykb.factoring.factoring.cheque.response.ResponseSaveCheques;
import com.ykb.factoring.factoring.cheque.response.ResponseSegmentation;
import com.ykb.factoring.factoring.cheque.service.ChequeRegistryService;
import com.ykb.factoring.factoring.cheque.service.ChequeRoleService;
import com.ykb.factoring.factoring.cheque.service.ChequeService;
import com.ykb.factoring.factoring.cheque.service.ChequeTempRegistryService;
import com.ykb.factoring.factoring.cheque.service.CustomerService;
import com.ykb.factoring.factoring.cheque.service.DataScienceService;
import com.ykb.factoring.factoring.cheque.util.ChequeValidator;
import com.ykb.factoring.factoring.cheque.util.DataTypeHelper;
import com.ykb.factoring.factoring.cheque.util.ErrorMessageHelper;
import com.ykb.factoring.factoring.common.exception.FctrException;
import com.ykb.factoring.factoring.common.exception.FctrExceptionData;
import lombok.RequiredArgsConstructor;
import org.apache.commons.collections4.map.HashedMap;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;
import org.springframework.util.ObjectUtils;
import org.springframework.web.multipart.MultipartFile;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class ChequeServiceImpl implements ChequeService {

    private final Logger logger = LoggerFactory.getLogger(ChequeServiceImpl.class);

    private final DataScienceService dataScienceService;

    private final MiletosClient miletosClient;

    private final CommonServicesClient commonServicesClient;

    private final CustomerService customerService;

    private final ChequeRegistryService chequeRegistryService;

    private final ChequeRoleService chequeRoleService;

    private final ChequeInfoRepository chequeInfoRepository;

    private final ChequeTempRegistryService chequeTempRegistryService;

    private final ChequeMapper chequeMapper;

    private final ChequeSpecificationGenerator specificationGenerator;

    @Value("${be.miletos.key:}")
    private String miletosKey;

    @Override
    public Customer searchExistingDrawer(RequestSearchCheque requestSearchCheque) {
        List<ChequeInfo> existingChequeInfoList = chequeInfoRepository.findAll(generateChequeInfoSpecs(requestSearchCheque));

        if (existingChequeInfoList.isEmpty()) {
            return null;
        }

        ChequeInfo chequeInfo = existingChequeInfoList.get(0);

        if (CollectionUtils.isEmpty(chequeInfo.getChequeRoles())) {
            return null;
        }

        Optional<ChequeRole> chequeRole = chequeInfo.getChequeRoles()
                .stream()
                .filter(ChequeRole::isDrawer)
                .findFirst();

        return chequeRole.map(role -> customerService.findById(role.getCustomerId())).orElse(null);
    }

    @Override
    public ChequeInfoDTO searchCheque(RequestSearchCheque requestSearchCheque) {
        List<ChequeInfo> chequeInfoList = chequeInfoRepository.findAll(generateChequeInfoSpecs(requestSearchCheque));

        if (chequeInfoList.isEmpty()) {
            return null;
        }

        return chequeMapper.toDto(chequeInfoList.get(0));
    }

    @Override
    public List<OfficialRateDTO> getOfficialRates() {
        return commonServicesClient.getAllOfficialRates();
    }

    @Override
    public List<ChequeInfoByFilterDTO> searchChequeByFilter(RequestSearchChequeByFilter requestSearchChequeByFilter) {
        List<ChequeInfo> chequeInfoList = chequeInfoRepository.findAll(
                specificationGenerator.initialize()
                        //TODO: Filtreye çek istihbarat sonuç bilgisi de eklenecek: Intelligence.Result kolonu
                        .equalExactly("currency", requestSearchChequeByFilter.getCurrency())
                        .equalExactly("customerId", requestSearchChequeByFilter.getCustomerId())
                        .in("chequeNo", requestSearchChequeByFilter.getChequeNos())
                        .in("chequeRegistry", requestSearchChequeByFilter.getChequeRegistryIds())
                        .in("channelCode", requestSearchChequeByFilter.getChannelCodes())
                        .between("amount", requestSearchChequeByFilter.getAmountRange())
                        .between("issueDate", requestSearchChequeByFilter.getIssueDateRange())
                        .between("createDate", requestSearchChequeByFilter.getCreationDateRange())
                        .byRoleTypeAndCustomer(requestSearchChequeByFilter.getChequeRoles())
                        .distinctModeOn()
                        .generateViaAnd()
        );

        if (chequeInfoList.isEmpty()) {
            return Collections.emptyList();
        }

        return chequeMapper.toChequeFilterDtoList(chequeInfoList);
    }

    private Specification<ChequeInfo> generateChequeInfoSpecs(RequestSearchCheque request) {
        return specificationGenerator.initialize()
                .equalExactly("bankCode", request.getBankCode())
                .equalExactly("branchCode", request.getBranchCode())
                .equalExactly("accountNo", request.getAccountNo())
                .equalExactly("chequeNo", request.getChequeNo())
                .generateViaAnd();
    }

    @Override
    public ResponseExcelExtract extractChequesFromExcel(RequestExtractExcel request) {
        ResponseExcelExtract response = new ResponseExcelExtract();
        List<ChequeInfoDTO> chequeInfoDTOS = new ArrayList<>();

        if (request.getCustomerNo() == null) {
            return null;
        }

        RequestCustomerSearch requestCustomerSearch = new RequestCustomerSearch();
        requestCustomerSearch.setCustomerNo(request.getCustomerNo().toString());
        List<Customer> customerList = customerService.customerSearch(requestCustomerSearch);

        if (customerList.isEmpty()) return null;

        for (MultipartFile file : request.getFiles()) {
             chequeInfoDTOS.addAll(extractFromExcel(file, customerList.get(0)));
        }

        response.setChequeInfoDTOS(chequeInfoDTOS);
        response.summarizeAllErrors();

        for (ChequeInfoDTO chequeInfoDTO : chequeInfoDTOS) {
            if (chequeInfoDTO.hasError()) {
                response.addToFailList(chequeInfoDTO);
            } else {
                response.addToSuccessList(chequeInfoDTO);
            }
        }

        if (response.hasSuccessCheque()) {
            handleCustomerOpenings(response, request.getBranchId(), request.getCustomerId());
            ChequesSaveResultDTO dto = handleSaveCheques(response.getSuccesses());

            if (dto.getChequeRegistry() != null) {
                response.setRegisterNo(dto.getChequeRegistry().getId());
                response.setReferenceId(dto.getChequeRegistry().getId());
            }
        }

        return response;
    }

    private ChequesSaveResultDTO handleSaveCheques(List<ChequeInfoDTO> chequeInfoDTOS) {
        ChequesSaveResultDTO dto = new ChequesSaveResultDTO();
        List<ChequeInfo> chequeInfoList = new ArrayList<>();

        int counter = 1;
        for (ChequeInfoDTO chequeInfoDTO : chequeInfoDTOS) {
            validateChequeInfoDTO(chequeInfoDTO, counter);
            counter += 1;

            if (chequeInfoDTO.hasError()) {
                dto.getFails().add(chequeInfoDTO);
                continue;
            }

            dto.getSuccesses().add(chequeInfoDTO);

            ChequeInfo chequeInfo = chequeMapper.toEntity(chequeInfoDTO);
            chequeInfo.getChequeRoles().forEach(chequeRole -> chequeRole.setChequeInfo(chequeInfo));

            chequeInfoList.add(chequeInfo);
        }

        if (chequeInfoList.isEmpty()) {
            return dto;
        }

        ChequeRegistry chequeRegistry = chequeRegistryService.create(chequeInfoDTOS);
        ChequeTempRegistry chequeTempRegistry = null;

        int chequeInfoCounter = 1;
        int jobCounter = 1;
        int iasRowCountPerJob = getIasRowCountPerJob();

        for (ChequeInfo chequeInfo : chequeInfoList) {
            chequeInfo.setChequeRegistry(chequeRegistry);

            if (chequeInfoCounter > iasRowCountPerJob) {
                int currentJobPage = Math.floorDiv(chequeInfoCounter, iasRowCountPerJob);
                if (chequeTempRegistry == null || jobCounter != currentJobPage) {
                    chequeTempRegistry = chequeTempRegistryService.create(chequeRegistry);
                    jobCounter++;
                }

                chequeTempRegistry.getChequeInfoList().add(chequeInfo);
                chequeInfo.setChequeTempRegistry(chequeTempRegistry);
            } else {
                chequeRegistry.getChequeInfoList().add(chequeInfo);
            }
            chequeInfoCounter++;
        }

        chequeInfoRepository.saveAll(chequeInfoList);

        dto.setChequeRegistry(chequeRegistry);

        return dto;
    }

    @Override
    public List<String> extractChequesFromImages(List<MultipartFile> files) {
        List<CompletableFuture<ResponseSegmentation>> completableFutureList = new ArrayList<>();

        for (MultipartFile file : files) {
            try {
                String base64 = Base64.getEncoder().encodeToString(file.getBytes());

                RequestSegmentation request = new RequestSegmentation();
                request.setGuid(file.getOriginalFilename());
                request.setImage(base64);

                completableFutureList.add(
                        CompletableFuture.supplyAsync(() -> dataScienceService.segmentation(request))
                );
            } catch (Exception ex) {
                logger.error("Unable to segmented cheque images from image", ex);
            }
        }

        CompletableFuture.allOf(
                completableFutureList.toArray(
                        new CompletableFuture[0]
                )
        );

        return extractResults(completableFutureList);
    }

    private List<String> extractResults(List<CompletableFuture<ResponseSegmentation>> completableFutures) {
        List<String> base64List = new ArrayList<>();

        for (CompletableFuture<ResponseSegmentation> future : completableFutures) {
            try {
                ResponseSegmentation response = future.get();
                if (response != null) {
                    base64List.addAll(response.getImages());
                }
            } catch (InterruptedException | ExecutionException e) {
                logger.error("Unable to extract results of segmented images", e);
            }
        }

        return base64List;
    }

    @Override
    public ResponseReadChequesFromImages readChequesFromImages(List<MultipartFile> images, String customerNo) {
        if (customerNo == null) {
            return null;
        }

        List<Customer> customerList = customerService.customerSearch(
                RequestCustomerSearch.createByCustomerNo(customerNo)
        );

        if (customerList.isEmpty()) return null;

        List<CompletableFuture<ChequeInfoDTO>> completableFutureList = new ArrayList<>();

        for (MultipartFile file : images) {
            completableFutureList.add(
                    CompletableFuture.supplyAsync(() -> readChequeFromImage(file))
            );
        }

        CompletableFuture.allOf(
                completableFutureList.toArray(
                        new CompletableFuture[0]
                )
        );

        return validateReadChequesFromImages(completableFutureList, customerList.get(0));
    }

    private ChequeInfoDTO readChequeFromImage(MultipartFile file) {
        ChequeInfoDTO chequeInfoDTO = null;

        try {
            ResponseChequeReading responseChequeReading = miletosClient.readCheque(
                    miletosKey, file, "false", UUID.randomUUID().toString()
            );
            chequeInfoDTO = new ChequeInfoDTO(responseChequeReading, file);
        } catch (Exception ex) {
            logger.error("Unable to read cheque information using miletos", ex);
        }

        return chequeInfoDTO;
    }

    private ResponseReadChequesFromImages validateReadChequesFromImages(List<CompletableFuture<ChequeInfoDTO>> completableFutures, Customer customer) {
        ResponseReadChequesFromImages response = new ResponseReadChequesFromImages();

        for (CompletableFuture<ChequeInfoDTO> completableFuture : completableFutures) {
            try {
                ChequeInfoDTO chequeInfoDTO = completableFuture.get();
                if (chequeInfoDTO == null) continue;

                validateChequeInfoDTO(chequeInfoDTO, 0);
                chequeInfoDTO.setCustomerId(customer.getId());
                chequeInfoDTO.setCustomer(customer);

                if (chequeInfoDTO.hasError()) {
                    response.addToFailList(chequeInfoDTO);
                } else {
                    response.addToSuccessList(chequeInfoDTO);
                }

            } catch (InterruptedException | ExecutionException ex) {
                logger.error("Unable to validate cheque coming from read cheque image", ex);
            }
        }

        if (response.hasSuccessCheque()) {
            handleCustomerOpenings(response, customer.getCustomerBranchId(), customer.getId());
            ChequesSaveResultDTO dto = handleSaveCheques(response.getSuccesses());

            if (dto.getChequeRegistry() != null) {
                response.setRegisterNo(dto.getChequeRegistry().getId());
                response.setReferenceId(dto.getChequeRegistry().getId());
            }
        }

        return response;
    }

    @Override
    public ResponseSaveCheques saveCheques(RequestSaveCheques request) {
        request.clearErrorFields();

        ResponseSaveCheques response = new ResponseSaveCheques();

        ChequesSaveResultDTO result = handleSaveCheques(request.getCheques());

        response.setFails(result.getFails());
        response.setSuccesses(result.getSuccesses());

        if (result.getChequeRegistry() != null) {
            response.setReferenceId(result.getChequeRegistry().getId());
            response.setRegisterNo(result.getChequeRegistry().getId());
        }

        return response;
    }

    private List<ChequeInfoDTO> extractFromExcel(MultipartFile file, Customer customer) {
        String fileName = file.getOriginalFilename();
        List<ChequeInfoDTO> chequeInfoDTOS = new ArrayList<>();
        if (ObjectUtils.isEmpty(fileName)) return chequeInfoDTOS;

        String extension = fileName.substring(fileName.lastIndexOf(".") + 1);

        Workbook wb = null;
        try {
            if ("xlsx".equalsIgnoreCase(extension))  {
                wb = new XSSFWorkbook(file.getInputStream());
            } else if ("xls".equalsIgnoreCase(extension)) {
                wb = new HSSFWorkbook(file.getInputStream());
            }
        } catch (Exception ex) {
            logger.error("Unable to construct workbook using file {}", fileName, ex);
        }

        if (wb != null) {
            chequeInfoDTOS.addAll(extractDataFromWorkBook(wb, customer));
        }

        return chequeInfoDTOS;
    }

    private List<ChequeInfoDTO> extractDataFromWorkBook(Workbook wb, Customer customer) {
        List<ChequeInfoDTO> chequeInfoDTOS = new ArrayList<>();

        int sheetCount = wb.getNumberOfSheets();

        for (int i = 0;i < sheetCount; i++) {
            Sheet ws = wb.getSheetAt(i);

            SheetErrorDTO sheetError = new SheetErrorDTO();
            sheetError.setSheetIndex(i);

            int rowIndex = 0;

            for (Row row : ws) {
                if (rowIndex == 0) {
                    rowIndex++;
                    continue;
                }

                ChequeInfoDTO chequeInfo = new ChequeInfoDTO();
                chequeInfo.setRowIndex(rowIndex);
                chequeInfo.setSheetIndex(i + 1);
                chequeInfo.setChannelCode(ChequeChannel.APP.getValue());
                chequeInfo.setCustomerId(customer.getId());
                chequeInfo.setCustomer(customer);

                Iterator<Cell> cellIterator = row.cellIterator();

                int cellIndex = 0;

                while (cellIterator.hasNext()) {
                    Cell cell = cellIterator.next();

                    String stringValue = getStringValueOfCell(cell);

                    extractValuesFromRow(chequeInfo, cellIndex, stringValue);
                    cellIndex++;
                }

                if (chequeInfo.hasData()) {
                    validateChequeInfoDTO(chequeInfo, rowIndex);

                    chequeInfoDTOS.add(chequeInfo);
                }

                rowIndex++;
            }
        }

        return chequeInfoDTOS;
    }

    private String getStringValueOfCell(Cell cell) {
        String value = null;

        if (cell.getCellType() == CellType.STRING) {
            value = cell.getStringCellValue();
        } else if (cell.getCellType() == CellType.NUMERIC) {
            if (DateUtil.isCellDateFormatted(cell)) {
                DateFormat df = new SimpleDateFormat("dd.MM.yyyy");
                value = df.format(cell.getDateCellValue());
            } else {
                value = DataTypeHelper.getStringFromDouble(cell.getNumericCellValue());
            }
        }

        return value;
    }

    private void extractValuesFromRow(ChequeInfoDTO cheque, Integer cellIndex, String value) {
        if (cellIndex == 0) {
            cheque.setChequeNo(DataTypeHelper.convertToInteger(value));
        } else if (cellIndex == 1) {
            cheque.setAmount(DataTypeHelper.convertToBigDecimal(value));
        } else if (cellIndex == 2) {
            cheque.setIssueDate(DataTypeHelper.convertToDate(value));
        } else if (cellIndex == 3) {
            cheque.setBankCode(value);
        } else if (cellIndex == 4) {
            cheque.setBranchCode(value);
        } else if (cellIndex == 5) {
            cheque.setAccountNo(DataTypeHelper.convertToLong(value));
        } else if (cellIndex == 6) {
            cheque.addDrawerNo(DataTypeHelper.convertToInteger(value));
        } else if (cellIndex == 7) {
            cheque.addDrawerTcknVkn(DataTypeHelper.convertToLong(value));
        } else if (cellIndex == 8) {
            cheque.setIssuePlace(value);
        } else if (cellIndex == 9) {
            cheque.addEndorserNo(DataTypeHelper.convertToInteger(value));
        } else if (cellIndex == 10) {
            cheque.addEndorserTcknVkn(DataTypeHelper.convertToLong(value));
        } else if (cellIndex == 11) {
            cheque.setCurrency(value);
        } else if (cellIndex == 12) {
            cheque.setDescription(value);
        }
    }

    private void validateChequeInfoDTO(ChequeInfoDTO chequeInfo, Integer rowIndex) {
        ChequeValidator.validateChequeNo(chequeInfo, rowIndex);
        ChequeValidator.validateChequeAmount(chequeInfo, rowIndex);
        ChequeValidator.validateIssueDate(chequeInfo, rowIndex);
        ChequeValidator.validateChequeBank(chequeInfo, rowIndex);
        ChequeValidator.validateChequeBranch(chequeInfo, rowIndex);
        ChequeValidator.validateChequeAccountNo(chequeInfo, rowIndex);
        ChequeValidator.validateDrawerNo(chequeInfo, rowIndex);
        ChequeValidator.validateDrawerTcknVkn(chequeInfo, rowIndex);
        ChequeValidator.validateEndorserNo(chequeInfo, rowIndex);
        ChequeValidator.validateEndorserTcknVkn(chequeInfo, rowIndex);
        ChequeValidator.validateCurrency(chequeInfo, rowIndex);
    }

    private Integer getIasRowCountPerJob() {
        ParameterCriteria parameterCriteria = new ParameterCriteria();
        parameterCriteria.setName("");

        try {
            List<ParameterDTO> parameterDTOS = commonServicesClient.findAllByCriteria(parameterCriteria).getBody();
            if (parameterDTOS != null && !parameterDTOS.isEmpty()) {
                return Integer.parseInt(parameterDTOS.get(0).getValue());
            }
        } catch (Exception ex) {
            logger.error("Unable to get IAS row count per job, using default one", ex);
        }
        return 10;
    }

    private void handleCustomerOpenings(ResponseReadChequesFromImages response, Long branchId, Long portfolioManagerId) {
        Map<Long, Customer> customerMap = new HashedMap<>();

        for (ChequeInfoDTO chequeInfoDTO : response.getSuccesses()) {
            for (ChequeRoleDTO chequeRole : chequeInfoDTO.getChequeRoles()) {
                Customer customer = getCustomer(branchId, portfolioManagerId, customerMap, chequeRole);

                if (customer == null) {
                    ExcelErrorDTO error = createExcelErrorDTO(chequeInfoDTO, chequeRole);
                    response.addToErrorList(error);
                } else {
                    chequeRole.setCustomerId(customer.getId());
                }

                chequeRole.setCustomer(customer);
            }
        }
    }

    private void handleCustomerOpenings(ResponseExcelExtract response, Long branchId, Long portfolioManagerId) {
        Map<Long, Customer> customerMap = new HashedMap<>();

        for (ChequeInfoDTO chequeInfoDTO : response.getChequeInfoDTOS()) {
            for (ChequeRoleDTO chequeRole : chequeInfoDTO.getChequeRoles()) {
                Customer customer = getCustomer(branchId, portfolioManagerId, customerMap, chequeRole);

                if (customer == null) {
                    ExcelErrorDTO error = createExcelErrorDTO(chequeInfoDTO, chequeRole);
                    response.addToErrorList(error);
                } else {
                    chequeRole.setCustomerId(customer.getId());
                }

                chequeRole.setCustomer(customer);
            }
        }
    }

    private Customer getCustomer(Long branchId, Long portfolioManagerId, Map<Long, Customer> customerMap, ChequeRoleDTO chequeRole) {
        Customer customer;

        if (customerMap.containsKey(chequeRole.getCustomerTcknVkn())) {
            customer = customerMap.get(chequeRole.getCustomerTcknVkn());
        } else {
            customer = customerService.findOrCreateCustomer(
                    chequeRole.getCustomerTcknVkn() != null ?
                            chequeRole.getCustomerTcknVkn().toString() :
                            null,
                    branchId,
                    portfolioManagerId
            );
            customerMap.put(chequeRole.getCustomerTcknVkn(), customer);
        }

        return customer;
    }

    private ExcelErrorDTO createExcelErrorDTO(ChequeInfoDTO chequeInfoDTO, ChequeRoleDTO chequeRole) {
        ExcelErrorDTO error = ErrorMessageHelper.getPotentialOpeningError(
                getFieldNameFromChequeRole(chequeRole),
                chequeInfoDTO.getRowIndex(),
                chequeRole.getCustomerTcknVkn()
        );
        chequeRole.setCustomerTcknVknError(error.getErrorCode());
        chequeInfoDTO.addError(error);
        return error;
    }

    private String getFieldNameFromChequeRole(ChequeRoleDTO chequeRole) {
        if (ChequeRoleType.DRAWER.equals(chequeRole.getRoleTypeCode())) {
            return ExcelField.DRAWER_TCKN_VKN;
        } else if (ChequeRoleType.ENDORSER.equals(chequeRole.getRoleTypeCode())) {
            return ExcelField.ENDORSER_TCKN_VKN;
        }

        return "";
    }

    @Override
    @Transactional
    public List<ChequeInfoDTO> updateAll(List<ChequeInfoDTO> chequeDtos) {
        List<ChequeInfoDTO> chequeDtosWithId = chequeDtos.stream()
                .filter(chequeDto -> Objects.nonNull(chequeDto.getId()))
                .toList();

        if (CollectionUtils.isEmpty(chequeDtosWithId)) {
            return Collections.emptyList();
        }

        Set<Long> incomingIds = chequeDtosWithId.stream()
                .map(ChequeInfoDTO::getId)
                .collect(Collectors.toSet());

        List<ChequeInfo> chequesToUpdate = chequeInfoRepository.findAllById(incomingIds);

        if (CollectionUtils.isEmpty(chequesToUpdate)) {
            return Collections.emptyList();
        }

        validateMICRNotInUseOnDB(chequeDtosWithId);

        mapEntitiesToUpdate(chequeDtosWithId, chequesToUpdate);

        try {
            List<ChequeInfo> updatedCheques = chequeInfoRepository.saveAll(chequesToUpdate);
            return chequeMapper.toDtoList(updatedCheques);
        } catch (DuplicateKeyException e) {
            throw new FctrException(new FctrExceptionData("db.duplicate.key", HttpStatus.CONFLICT), "MICR");
        } catch (DataIntegrityViolationException e) {
            throw new FctrException(new FctrExceptionData("db.data.integrity.violation", HttpStatus.BAD_REQUEST));
        }
    }

    private void validateMICRNotInUseOnDB(List<ChequeInfoDTO> chequeDtosWithId) {
        for (ChequeInfoDTO eachChequeDtos : chequeDtosWithId) {
            Optional<ChequeInfo> optionalCheque = chequeInfoRepository.findChequeByMICR(eachChequeDtos.getMICRInfo());
            Long chequeId = optionalCheque.isPresent()
                    ? optionalCheque.get().getId()
                    : null;

            boolean notFoundOnDB = Objects.isNull(chequeId);
            boolean usingByItself = Objects.nonNull(chequeId) && chequeId.equals(eachChequeDtos.getId());
            if (notFoundOnDB || usingByItself) {
                continue;
            }

            throw new FctrException(new FctrExceptionData("system.existing.cheque.micr", HttpStatus.CONFLICT), eachChequeDtos.getChequeNo().toString());
        }
    }

    private void mapEntitiesToUpdate(List<ChequeInfoDTO> chequeDtosWithId, List<ChequeInfo> chequesToUpdate) {
        for (ChequeInfo eachCheque : chequesToUpdate) {
            ChequeInfoDTO matchedNewData = chequeDtosWithId.stream()
                    .filter(chequeDto -> eachCheque.getId().equals(chequeDto.getId()))
                    .findFirst()
                    .orElse(null);

            chequeMapper.updateEntity(matchedNewData, eachCheque);
        }
    }

    @Override
    @Transactional
    public List<ChequeInfoDTO> deleteAll(List<ChequeInfo> cheques) {
        if (CollectionUtils.isEmpty(cheques)) {
            return Collections.emptyList();
        }

        Set<ChequeRole> allRelatedRoles = cheques.stream()
                .flatMap(eachCheque -> eachCheque.getChequeRoles().stream())
                .collect(Collectors.toSet());

        chequeRoleService.deleteAll(allRelatedRoles);
        chequeInfoRepository.deleteAll(cheques);

        Set<Long> registryIdsOfDeletedCheques = cheques.stream()
                .map(ChequeInfo::getRegistryId)
                .collect(Collectors.toSet());

        List<ChequeRegistry> registriesHasNoCheques = chequeRegistryService.findRegistriesWithoutCheque(registryIdsOfDeletedCheques);
        chequeRegistryService.deleteAll(registriesHasNoCheques);

        return chequeMapper.toDtoList(cheques);
    }

    @Override
    @Transactional
    public List<ChequeInfoDTO> deleteAllById(Set<Long> ids) {
        if (CollectionUtils.isEmpty(ids)) {
            return Collections.emptyList();
        }

        List<ChequeInfo> chequesToDelete = chequeInfoRepository.findAllById(ids);

        if (CollectionUtils.isEmpty(chequesToDelete)) {
            return Collections.emptyList();
        }

        return deleteAll(chequesToDelete);
    }

    @Override
    @Transactional
    public ResponseChequeBatchChange applyChangesInBatch(RequestChequeBatchChange requestChequeBatchChange) {
        //TODO: Oto limit için aksiyon alınacak. Silme ve Güncelleme işlemlerindeki durumlara göre düşün...

        List<ChequeInfoDTO> deletedChequeDtos = deleteAllById(requestChequeBatchChange.getChequeIdsToDelete());
        List<ChequeInfoDTO> updatedChequeDtos = updateAll(requestChequeBatchChange.getChequeDTOSToUpdate());

        return ResponseChequeBatchChange.builder()
                .deletedChequeDtos(deletedChequeDtos)
                .updatedChequeDtos(updatedChequeDtos)
                .build();
    }
}
