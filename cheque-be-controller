package com.ykb.factoring.factoring.cheque.controller;

import com.ykb.factoring.factoring.cheque.client.ExternalServicesBffClient;
import com.ykb.factoring.factoring.cheque.dto.ChequeInfoByFilterDTO;
import com.ykb.factoring.factoring.cheque.dto.ChequeInfoDTO;
import com.ykb.factoring.factoring.cheque.dto.ChequeMICR;
import com.ykb.factoring.factoring.cheque.dto.CurrencyDTO;
import com.ykb.factoring.factoring.cheque.dto.OfficialRateDTO;
import com.ykb.factoring.factoring.cheque.dto.customer.Customer;
import com.ykb.factoring.factoring.cheque.dto.eftbank.BankItemDTO;
import com.ykb.factoring.factoring.cheque.dto.eftbank.BranchItemDTO;
import com.ykb.factoring.factoring.cheque.enumaration.Currency;
import com.ykb.factoring.factoring.cheque.mapper.CurrencyMapper;
import com.ykb.factoring.factoring.cheque.request.RequestChequeBatchChange;
import com.ykb.factoring.factoring.cheque.request.RequestCustomerSearch;
import com.ykb.factoring.factoring.cheque.request.RequestExtractExcel;
import com.ykb.factoring.factoring.cheque.request.RequestFindOrCreateCustomer;
import com.ykb.factoring.factoring.cheque.request.RequestSaveCheques;
import com.ykb.factoring.factoring.cheque.request.RequestSearchCheque;
import com.ykb.factoring.factoring.cheque.request.RequestSearchChequeByFilter;
import com.ykb.factoring.factoring.cheque.response.ResponseChequeBatchChange;
import com.ykb.factoring.factoring.cheque.response.ResponseExcelExtract;
import com.ykb.factoring.factoring.cheque.response.ResponseReadChequesFromImages;
import com.ykb.factoring.factoring.cheque.response.ResponseSaveCheques;
import com.ykb.factoring.factoring.cheque.service.ChequeService;
import com.ykb.factoring.factoring.cheque.service.CustomerService;
import com.ykb.factoring.factoring.common.exception.FctrException;
import com.ykb.factoring.factoring.common.exception.FctrExceptionData;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import java.util.Arrays;
import java.util.List;

@RestController
@RequiredArgsConstructor
@RequestMapping
public class ChequeController {

    private final ChequeService chequeService;

    private final CustomerService customerService;

    private final CurrencyMapper currencyMapper;

    private final ExternalServicesBffClient externalServicesBffClient;

    @PostMapping(
            value = "/extract-excel",
            consumes = MediaType.MULTIPART_FORM_DATA_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    public ResponseExcelExtract extractExcel(
            @RequestPart("customerId") String customerId,
            @RequestPart("customerNo") String customerNo,
            @RequestPart("branchId") String branchId,
            @RequestPart("files") List<MultipartFile> files
    ) {
        RequestExtractExcel request = new RequestExtractExcel();
        request.setCustomerId(Long.parseLong(customerId));
        request.setCustomerNo(Integer.parseInt(customerNo));
        request.setBranchId(Long.parseLong(branchId));
        request.setFiles(files);
        return chequeService.extractChequesFromExcel(request);
    }

    @PostMapping(
            value = "/extract-image",
            consumes = MediaType.MULTIPART_FORM_DATA_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    public List<String> extractImage(@RequestPart("files") List<MultipartFile> files) {
        return chequeService.extractChequesFromImages(files);
    }

    @PostMapping(
            value = "/read-images",
            consumes = MediaType.MULTIPART_FORM_DATA_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    public ResponseReadChequesFromImages readChequesFromImages(
            @RequestPart("customerNo") String customerNo,
            @RequestPart("files") List<MultipartFile> files
    ) {
        return chequeService.readChequesFromImages(files, customerNo);
    }

    @PostMapping(
            value = "/save-cheques",
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    public ResponseSaveCheques saveCheques(@RequestBody RequestSaveCheques requestSaveCheques) {
        return chequeService.saveCheques(requestSaveCheques);
    }

    @PostMapping(
            value = "/find-or-create-customer",
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    public Customer findOrCreateCustomer(@RequestBody RequestFindOrCreateCustomer requestFindOrCreateCustomer) {
        return customerService.findOrCreateCustomer(
                requestFindOrCreateCustomer.getTcknVkn(),
                requestFindOrCreateCustomer.getBranchId(),
                requestFindOrCreateCustomer.getPortfolioManagerId()
        );
    }

    @GetMapping(
            value = "/currency",
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    public List<CurrencyDTO> getCurrencies() {
        return Arrays.stream(Currency.values())
                .map(currencyMapper::toDto)
                .toList();
    }

    @PostMapping(
            value = "/existing-drawer",
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    public Customer searchExistingDrawer(@RequestBody RequestSearchCheque requestSearchCheque) {
        return chequeService.searchExistingDrawer(requestSearchCheque);
    }

    @GetMapping(
            value = "/customer/search",
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    public Customer customerSearch(RequestCustomerSearch requestCustomerSearch) {
        List<Customer> customerList = customerService.customerSearch(requestCustomerSearch);
        if (customerList.isEmpty()) return null;
        return customerList.get(0);
    }

    @PostMapping(
            value = "/search",
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    public ChequeInfoDTO searchCheque(@RequestBody RequestSearchCheque requestSearchCheque) {
        return chequeService.searchCheque(requestSearchCheque);
    }

    @GetMapping(
            value = "/official-rate",
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    public List<OfficialRateDTO> getOfficialRates() {
        return chequeService.getOfficialRates();
    }

    @GetMapping(
            value = "/bank",
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    public List<BankItemDTO> getBankList() {
        return externalServicesBffClient.getBankList();
    }

    @GetMapping(
            value = "/branch",
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    public List<BranchItemDTO> getBranchList(String bankCode) {
        return externalServicesBffClient.findBranchList(bankCode);
    }

    @PostMapping(
            value = "/search-by-filter",
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    public List<ChequeInfoByFilterDTO> searchChequeByFilter(@RequestBody RequestSearchChequeByFilter requestSearchChequeByFilter) {
        return chequeService.searchChequeByFilter(requestSearchChequeByFilter);
    }

    @PostMapping(
            value = "/change-in-batch",
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    public ResponseChequeBatchChange applyChangesInBatch(@RequestBody RequestChequeBatchChange requestChequeBatchChange) {
        validateNotIncludeDuplicatedMICR(requestChequeBatchChange.getMICRS());
        return chequeService.applyChangesInBatch(requestChequeBatchChange);
    }

    private void validateNotIncludeDuplicatedMICR(List<ChequeMICR> chequeMICRS) {
        List<ChequeMICR> distinctChequeMICRS = chequeMICRS.stream()
                .distinct()
                .toList();

        if (chequeMICRS.size() != distinctChequeMICRS.size()) {
            throw new FctrException(new FctrExceptionData("request.unique.cheque.micr", HttpStatus.BAD_REQUEST));
        }
    }
}
